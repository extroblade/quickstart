name: GitHub CI
run-name: ${{ github.actor }} ran the workflow ${{ github.workflow }} on ${{ github.event_name }}ðŸš€

on:
  push:
    branches:
      - main
      - dev
      - feat/**

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: List files for debugging
        run: ls -R .github/actions/setup-and-install/

      - name: Set up and install dependencies
        uses: ./.github/actions/setup-and-install

      - name: Set up environment file for development
        if: github.ref == 'refs/heads/dev'
        run: echo "${{ secrets.DEVELOPMENT_ENV }}" > .env

      - name: Set up environment file for production
        if: github.ref == 'refs/heads/main'
        run: echo "${{ secrets.PRODUCTION_ENV }}" > .env

      - name: Generate types
        env:
          API_URL: ${{ secrets.API_URL }}
        run: pnpm api:typegen

      - name: Build project
        run: pnpm run build

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: List files for debugging
        run: ls -R .github/actions/setup-and-install/

      - name: Set up and install dependencies
        uses: ./.github/actions/setup-and-install

      - name: Set up environment file for development
        if: github.ref == 'refs/heads/dev'
        run: echo "${{ secrets.DEVELOPMENT_ENV }}" > .env

      - name: Set up environment file for production
        if: github.ref == 'refs/heads/main'
        run: echo "${{ secrets.PRODUCTION_ENV }}" > .env

      - name: Install Playwright browsers if not cached
        run: pnpm exec playwright install
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'

      - name: Install system dependencies for Playwright
        run: |
          sudo apt-get update
          sudo apt-get install -y libwoff1 libopus0 libvpx7 libevent-2.1-7

      - name: Run unit tests
        run: pnpm run test:unit

      - name: Run end-to-end tests
        run: pnpm run test:e2e

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up and install dependencies
        uses: ./.github/actions/setup-and-install

      - name: Deploy build
        env:
          DEPLOY_ENV: ${{ secrets.DEPLOY_ENV }}
        run: |
          # Your deploy script or command here
          echo "Deploying build..."
          # Example: scp -r build/ user@server:/path/to/deploy
          # You can use rsync, scp, or any other deployment tool

  deploy-storybook:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up and install dependencies
        uses: ./.github/actions/setup-and-install

      - name: Build Storybook
        run: pnpm run build-storybook

      - name: Deploy Storybook
        env:
          STORYBOOK_DEPLOY_ENV: ${{ secrets.STORYBOOK_DEPLOY_ENV }}
        run: |
          # Your Storybook deploy script or command here
          echo "Deploying Storybook..."
          # Example: scp -r storybook-static/ user@server:/path/to/storybook
          # You can use rsync, scp, or any other deployment tool
